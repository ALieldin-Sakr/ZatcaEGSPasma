name: Release

on:
  workflow_dispatch:

jobs:
  create_release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      version: ${{ steps.get_version.outputs.version }}
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - uses: actions/checkout@v3
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'
      - name: Get Version
        id: get_version
        run: |
          VERSION=$(grep -oP '(?<=<AssemblyVersion>).*(?=</AssemblyVersion>)' Zatca.EGS/Zatca.EGS.csproj)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.get_version.outputs.version }}
          release_name: Release ${{ steps.get_version.outputs.version }}
          draft: false
          prerelease: false

  build:
    needs: create_release
    runs-on: ${{ matrix.os }}
    permissions:
      contents: write
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            output_name: ZatcaEGS-linux
            runtime: linux-x64
          - os: windows-latest
            output_name: ZatcaEGS-windows
            runtime: win-x64
          - os: macos-latest
            output_name: ZatcaEGS-macos
            runtime: osx-x64
    steps:
      - uses: actions/checkout@v3
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'
      - name: Display .NET Information
        run: dotnet --info
      - name: List Directory Contents
        run: ls -R
      - name: Restore dependencies
        run: dotnet restore Zatca.EGS/Zatca.EGS.csproj
      - name: Build
        run: dotnet build Zatca.EGS/Zatca.EGS.csproj --configuration Release --no-restore
      - name: Publish
        run: dotnet publish Zatca.EGS/Zatca.EGS.csproj -c Release -o ./publish -r ${{ matrix.runtime }} --self-contained false
      - name: Create macOS App Bundle
        if: matrix.os == 'macos-latest'
        run: |
          mkdir -p ZatcaEGS.app/Contents/{MacOS,Resources}
          cp Zatca.EGS/wwwroot/images/apple-icon.icns ZatcaEGS.app/Contents/Resources/
          echo -e "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0.dtd\">\n<plist version=\"1.0\">\n<dict>\n  <key>CFBundleExecutable</key>\n  <string>ZatcaEGS</string>\n  <key>CFBundleIconFile</key>\n  <string>apple-icon</string>\n</dict>\n</plist>" > ZatcaEGS.app/Contents/Info.plist
          cp ./publish/Zatca.EGS ZatcaEGS.app/Contents/MacOS/ZatcaEGS
          chmod +x ZatcaEGS.app/Contents/MacOS/ZatcaEGS
      - name: Zip Release
        uses: thedoctor0/zip-release@master
        with:
          type: 'zip'
          filename: ${{ matrix.output_name }}.zip
          directory: ./publish
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: ./publish/${{ matrix.output_name }}.zip
          asset_name: ${{ matrix.output_name }}.zip
          asset_content_type: application/zip
      - name: Upload logs if failed
        if: failure()
        uses: actions/upload-artifact@v2
        with:
          name: build-logs-${{ matrix.os }}
          path: |
            **/*.log
            **/*.trx
