@using ZatcaEGS.Helpers
@using Newtonsoft.Json
@using System.Xml.Linq
@using System.Text
@using System.Web
@model ApprovedInvoice

@{
    Layout = null;
}

@{
    //var fileContent = TempData["StringFileContent"] as string;
    
    // Retrieve the byte array of the ZIP file from TempData
    var zipFileBytes = TempData["ZipFile"] as byte[];
    var zipFileName = TempData["StringFileName"] as string;

    // Serialize API references for use in JavaScript
    var apiReference = Newtonsoft.Json.JsonConvert.SerializeObject(TempData["ApiReference"]);
    var apiInvoice = Newtonsoft.Json.JsonConvert.SerializeObject(TempData["ApiInvoice"]);
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Invoice Reporting - ZatcaEGS</title>
    <link rel="apple-touch-icon" sizes="60x60" href="~/images/logo.png">
    <link rel="shortcut icon" type="image/x-icon" href="favicon.ico">
    <script src="~/js/color-modes.js"></script>
    <!-- Scripts -->
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <link rel="stylesheet" type="text/css" href="https://fonts.googleapis.com/css?family=Roboto:300,400,500,700|Roboto+Slab:400,700|Material+Icons">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css">
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true">
    <script src="~/js/qrcode.js"></script>
</head>

<body class="d-flex flex-column min-vh-100 bg-tertiary">

    <svg xmlns="http://www.w3.org/2000/svg" class="d-none">
        <symbol id="check2" viewBox="0 0 16 16">
            <path d="M13.854 3.646a.5.5 0 0 1 0 .708l-7 7a.5.5 0 0 1-.708 0l-3.5-3.5a.5.5 0 1 1 .708-.708L6.5 10.293l6.646-6.647a.5.5 0 0 1 .708 0z">
            </path>
        </symbol>
        <symbol id="circle-half" viewBox="0 0 16 16">
            <path d="M8 15A7 7 0 1 0 8 1v14zm0 1A8 8 0 1 1 8 0a8 8 0 0 1 0 16z"></path>
        </symbol>
        <symbol id="moon-stars-fill" viewBox="0 0 16 16">
            <path d="M6 .278a.768.768 0 0 1 .08.858 7.208 7.208 0 0 0-.878 3.46c0 4.021 3.278 7.277 7.318 7.277.527 0 1.04-.055 1.533-.16a.787.787 0 0 1 .81.316.733.733 0 0 1-.031.893A8.349 8.349 0 0 1 8.344 16C3.734 16 0 12.286 0 7.71 0 4.266 2.114 1.312 5.124.06A.752.752 0 0 1 6 .278z">
            </path>
            <path d="M10.794 3.148a.217.217 0 0 1 .412 0l.387 1.162c.173.518.579.924 1.097 1.097l1.162.387a.217.217 0 0 1 0 .412l-1.162.387a1.734 1.734 0 0 0-1.097 1.097l-.387 1.162a.217.217 0 0 1-.412 0l-.387-1.162A1.734 1.734 0 0 0 9.31 6.593l-1.162-.387a.217.217 0 0 1 0-.412l1.162-.387a1.734 1.734 0 0 0 1.097-1.097l.387-1.162zM13.863.099a.145.145 0 0 1 .274 0l.258.774c.115.346.386.617.732.732l.774.258a.145.145 0 0 1 0 .274l-.774.258a1.156 1.156 0 0 0-.732.732l-.258.774a.145.145 0 0 1-.274 0l-.258-.774a1.156 1.156 0 0 0-.732-.732l-.774-.258a.145.145 0 0 1 0-.274l.774-.258c.346-.115.617-.386.732-.732L13.863.1z">
            </path>
        </symbol>
        <symbol id="sun-fill" viewBox="0 0 16 16">
            <path d="M8 12a4 4 0 1 0 0-8 4 4 0 0 0 0 8zM8 0a.5.5 0 0 1 .5.5v2a.5.5 0 0 1-1 0v-2A.5.5 0 0 1 8 0zm0 13a.5.5 0 0 1 .5.5v2a.5.5 0 0 1-1 0v-2A.5.5 0 0 1 8 13zm8-5a.5.5 0 0 1-.5.5h-2a.5.5 0 0 1 0-1h2a.5.5 0 0 1 .5.5zM3 8a.5.5 0 0 1-.5.5h-2a.5.5 0 0 1 0-1h2A.5.5 0 0 1 3 8zm10.657-5.657a.5.5 0 0 1 0 .707l-1.414 1.415a.5.5 0 1 1-.707-.708l1.414-1.414a.5.5 0 0 1 .707 0zm-9.193 9.193a.5.5 0 0 1 0 .707L3.05 13.657a.5.5 0 0 1-.707-.707l1.414-1.414a.5.5 0 0 1 .707 0zm9.193 2.121a.5.5 0 0 1-.707 0l-1.414-1.414a.5.5 0 0 1 .707-.707l1.414 1.414a.5.5 0 0 1 0 .707zM4.464 4.465a.5.5 0 0 1-.707 0L2.343 3.05a.5.5 0 1 1 .707-.707l1.414 1.414a.5.5 0 0 1 0 .708z">
            </path>
        </symbol>
    </svg>

    <div class="dropdown position-fixed bottom-0 end-0 mb-3 me-3 bd-mode-toggle">

        <button class="btn btn-bd-primary py-2 dropdown-toggle d-flex align-items-center" id="bd-theme" type="button"
                aria-expanded="false" data-bs-toggle="dropdown" aria-label="Toggle theme (light)">
            <svg class="bi my-1 theme-icon-active" width="1em" height="1em">
                <use href="#sun-fill"></use>
            </svg>
            <span class="visually-hidden" id="bd-theme-text">Toggle theme</span>
        </button>

        <ul class="dropdown-menu dropdown-menu-end shadow" aria-labelledby="bd-theme-text">
            <li>
                <button type="button" class="dropdown-item d-flex align-items-center active" data-bs-theme-value="light" aria-pressed="true">
                    <svg class="bi me-2 opacity-50" width="1em" height="1em">
                        <use href="#sun-fill"></use>
                    </svg>
                    Light
                    <svg class="bi ms-auto d-none" width="1em" height="1em">
                        <use href="#check2"></use>
                    </svg>
                </button>
            </li>
            <li>
                <button type="button" class="dropdown-item d-flex align-items-center" data-bs-theme-value="dark" aria-pressed="false">
                    <svg class="bi me-2 opacity-50" width="1em" height="1em">
                        <use href="#moon-stars-fill"></use>
                    </svg>
                    Dark
                    <svg class="bi ms-auto d-none" width="1em" height="1em">
                        <use href="#check2"></use>
                    </svg>
                </button>
            </li>
            <li>
                <button type="button" class="dropdown-item d-flex align-items-center" data-bs-theme-value="auto"
                        aria-pressed="false">
                    <svg class="bi me-2 opacity-50" width="1em" height="1em">
                        <use href="#circle-half"></use>
                    </svg>
                    Auto
                    <svg class="bi ms-auto d-none" width="1em" height="1em">
                        <use href="#check2"></use>
                    </svg>
                </button>
            </li>
        </ul>
    </div>


    <main class="flex-grow-1 d-flex align-items-center justify-content-center">
        <div class="container rounded text-center">
            <form id="relayForm" method="POST">
                <div class="container">
                    <div class="text-center pb-1">
                        <img src="~/images/logo.png" alt="ZatcaEGS" class="img-fluid" style="max-width: 60px;" />
                        <h3 class="mb-1">Manager Io - Invoice Reporting</h3>
                        <p class="lead" style="color:var(--bs-danger);">"The process cannot be undone, please ensure that the Invoice to be processed is correct and error-free."</p>
                    </div>
                </div>

                <hr />

                <!-- Page content-->

                <div class="row">

                    <div class="col-lg-9">

                        <div class="card mb-4">
                            <div class="card-header"><h5>Manager Invoice</h5></div>
                            <div class="card-body">

                                <div class="row">

                                    <div class="col-md-6">
                                        <div class="mb-2">
                                            <label for="managerUUID" class="form-label">Invoice UUID:</label>
                                            <input type="text" class="form-control form-control-sm text-center" id="managerUUID" name="ManagerUUID" value="@Model.ManagerUUID" readonly>
                                        </div>
                                    </div>

                                    <div class="col-md-6">
                                        <div class="mb-2">
                                            <label for="partyName" class="form-label">Party Name:</label>
                                            <input type="text" class="form-control form-control-sm text-center" id="partyName" name="PartyName" value="@Model.PartyName" readonly>
                                        </div>
                                    </div>
                                </div>

                                <div class="row">
                                    <div class="col-md-3">
                                        <div class="mb-2">
                                            <label for="referenceNumber" class="form-label">Reference Number:</label>
                                            <input type="text" class="form-control form-control-sm text-center" id="referenceNumber" name="Reference" value="@Model.Reference" readonly>
                                        </div>
                                    </div>
                                    <div class="col-md-3">
                                        <div class="mb-2">
                                            <label for="issueDate" class="form-label">Issue Date:</label>
                                            <input type="text" class="form-control form-control-sm text-center" id="issueDate" name="IssueDate" value="@Model.IssueDate" readonly>
                                        </div>
                                    </div>
                                    <div class="col-md-3">
                                        <div class="mb-2">
                                            <label for="invoiceType" class="form-label">Invoice Type:</label>
                                            <input type="text" class="form-control form-control-sm text-center" id="invoiceType" name="InvoiceType" value="@Model.InvoiceType" readonly>
                                        </div>
                                    </div>
                                    <div class="col-md-3">
                                        <div class="mb-2">
                                            <label for="invoiceSubType" class="form-label">Invoice Sub Type:</label>
                                            <input type="text" class="form-control form-control-sm text-center" id="invoiceSubType" name="InvoiceSubType" value="@Model.InvoiceSubType" readonly>
                                        </div>
                                    </div>
                                </div>

                                <div class="row">
                                    <div class="col-md-3">
                                        <div class="mb-2">
                                            <label for="currencyCode" class="form-label">Currency Code:</label>
                                            <input type="text" class="form-control form-control-sm text-center" id="currencyCode" name="CurrencyCode" value="@Model.CurrencyCode" readonly>
                                        </div>
                                    </div>
                                    <div class="col-md-3">
                                        <div class="mb-2">
                                            <label for="amount" class="form-label">Amount:</label>
                                            @Html.EditorFor(model => model.Amount, new { htmlAttributes = new { @class = "form-control form-control-sm right-align", @readonly = "readonly" } })
                                        </div>
                                    </div>
                                    <div class="col-md-3">
                                        <div class="mb-2">
                                            <label for="taxAmount" class="form-label">Tax Amount:</label>
                                            @Html.EditorFor(model => model.TaxAmount, new { htmlAttributes = new { @class = "form-control form-control-sm right-align", @readonly = "readonly" } })
                                        </div>
                                    </div>
                                    <div class="col-md-3">
                                        <div class="mb-2">
                                            <label for="totalAmount" class="form-label">Total Amount:</label>
                                            @Html.EditorFor(model => model.TotalAmount, new { htmlAttributes = new { @class = "form-control form-control-sm right-align", @readonly = "readonly" } })
                                        </div>
                                    </div>
                                </div>

                                <!-- Include hidden inputs for all other required fields -->
                                <input type="hidden" name="ZatcaUUID" value="@Model.ZatcaUUID" />
                                <input type="hidden" name="Referrer" value="@Model.Referrer" />
                                <input type="hidden" name="CallBack" value="@Model.CallBack" />
                                <input type="hidden" name="ICV" value="@Model.ICV" />
                                <input type="hidden" name="RequestType" value="@Model.RequestType" />
                                <input type="hidden" name="ApprovalStatus" value="@Model.ApprovalStatus" />
                                <input type="hidden" name="ServerResult" value="@Model.ServerResult" />
                                <input type="hidden" name="XmlFileName" value="@Model.XmlFileName" />
                                <input type="hidden" name="Base64QrCode" value="@Model.Base64QrCode" />
                                <input type="hidden" name="Base64Invoice" value="@Model.Base64Invoice" />
                                <input type="hidden" name="InvoiceHash" value="@Model.InvoiceHash" />
                                <input type="hidden" name="Timestamp" value="@Model.Timestamp" />
                                <input type="hidden" name="EditData" value="@Model.EditData" />

                                <input type="hidden" name="CertificateInfo" value="@Model.CertificateInfo" />

                                <hr style="margin: 5px 0px;" />

                                <!-- Tab Navigation -->
                                <ul class="nav nav-tabs" id="nav-tab" role="tablist">
                                    <li class="nav-item">
                                        <a class="nav-link" id="nav-manager-tab" data-bs-toggle="tab" href="#nav-manager" role="tab" aria-controls="nav-manager" aria-selected="true">Manager Invoice</a>
                                    </li>
                                    <li class="nav-item">
                                        <a class="nav-link" id="nav-ubl-tab" data-bs-toggle="tab" href="#nav-ubl" role="tab" aria-controls="nav-ubl" aria-selected="false">UBL Invoice</a>
                                    </li>
                                    <li class="nav-item">
                                        <a class="nav-link active" id="nav-response-tab" data-bs-toggle="tab" href="#nav-response" role="tab" aria-controls="nav-response" aria-selected="false">Server Response</a>
                                    </li>
                                </ul>
                                <!-- End Tab Navigation -->
                                <!-- Tab Content -->
                                <div class="tab-content" id="nav-tabContent">
                                    <div class="tab-pane fade" id="nav-manager" role="tabpanel" aria-labelledby="nav-manager-tab">
                                        <div class="mb-2">
                                            <textarea class="form-control form-control-sm" id="textareaManager" name="Base64Invoice" rows="10" readonly wrap="off" style="margin-top: 10px; min-height: 200px;">
                                                @{
                                                    if (Model.EditData != null)
                                                    {
                                                        try
                                                        {
                                                            var formattedJson = DocumentFormatter.SerializeObject(JsonConvert.DeserializeObject(Model.EditData));
                                                            @Html.Raw(formattedJson)
                                                            ;
                                                        }
                                                        catch (Exception ex)
                                                        {
                                                            <text>Error processing the invoice: @ex.Message</text>
                                                            ;
                                                        }
                                                    }
                                                    else
                                                    {
                                                        <text>No data available</text>
                                                        ;
                                                    }
                                                }
                                        </textarea>
                                        </div>
                                    </div>
                                    <div class="tab-pane fade" id="nav-ubl" role="tabpanel" aria-labelledby="nav-ubl-tab">
                                        <div class="mb-2">
                                            <textarea class="form-control form-control-sm" id="textareaUbl" name="Base64SignedInvoice" rows="10" readonly wrap="off" style="margin-top: 10px; min-height: 200px;">
                                                @{
                                                    if (Model.Base64Invoice != null)
                                                    {
                                                        try
                                                        {
                                                            var ublInvoice = Encoding.UTF8.GetString(Convert.FromBase64String(Model.Base64Invoice));
                                                            var formattedXml = DocumentFormatter.Beautify(XDocument.Parse(ublInvoice));
                                                            @Html.Raw(formattedXml)
                                                            ;
                                                        }
                                                        catch (Exception ex)
                                                        {
                                                            <text>Error processing the invoice: @ex.Message</text>
                                                            ;
                                                        }
                                                    }
                                                    else
                                                    {
                                                        <text>No data available</text>
                                                        ;
                                                    }
                                                }
                                        </textarea>
                                        </div>
                                    </div>
                                    <div class="tab-pane fade show active" id="nav-response" role="tabpanel" aria-labelledby="nav-response-tab">
                                        <div class="mb-2">
                                            <textarea class="form-control form-control-sm" id="textareaResponse" name="PortalResult" rows="10" readonly wrap="off" style="margin-top: 10px; min-height: 200px;">
                                                @{
                                                    if (Model.ServerResult != null)
                                                    {
                                                        try
                                                        {
                                                            var formattedJson = DocumentFormatter.SerializeObject(JsonConvert.DeserializeObject(Model.ServerResult));
                                                            @Html.Raw(formattedJson)
                                                            ;
                                                        }
                                                        catch
                                                        {
                                                            @Html.Raw(Model.ServerResult)
                                                            ;
                                                        }
                                                    }
                                                    else
                                                    {
                                                        <text>Test UBL Invoice with Compliance Check before Clearance or Reporting</text>
                                                        ;
                                                    }
                                                }
                                        </textarea>
                                        </div>
                                    </div>
                                </div>
                                <!-- End Tab Content -->

                                <hr />

                                <div class="d-flex justify-content-between">
                                    <div>
                                        <button type="button" class="btn btn-secondary mt-1" onclick="window.location.href='@Model.Referrer'">Back to Manager</button>
                                    </div>

                                    <div id="buttonsContainer">

                                        @if (!(Model.ApprovalStatus == "CLEARED" || Model.ApprovalStatus == "REPORTED"))
                                        {
                                            <button id="complianceCheckBtn" class="btn btn-info mt-1">
                                                <i class="fas fa-spinner fa-spin hidden"></i>
                                                Compliance Check
                                            </button>
                                        }
                                        
                                        <!-- Dynamic Button Here -->

                                    </div>
                                </div>

                            </div>
                        </div>

                    </div>

                    <div class="col-lg-3">
                        <!-- Side widget-->
                        <div class="card mb-4">
                            <div class="card-header"><h5>CSR : @Model.EnvironmentType.ToString() </h5></div>
                            <div class="card-body text-center">
                                <div class="d-flex justify-content-between align-items-center mb-3">
                                    <div class="qr-code-card">
                                        <div id="qrCodeImage"></div>
                                    </div>
                                </div>

                                <a id="downloadLink1" style="width: 200px"
                                   href="data:application/xml;base64,@Model.Base64Invoice"
                                   class="btn btn-success mt-1" download="@Model.XmlFileName">Download eInvoice XML</a>

                                <hr />
                                <textarea class="form-control form-control-sm" id="qrCodeContent" name="qrCodeContent" rows="13" readonly wrap="off" style="margin-top: 10px; min-height: 200px;">@Model.DecodedQrCode</textarea>
                            </div>
                        </div>
                    </div>

                </div>
            </form>
        </div>

    </main>

    <div id="progress" style="display: none;">Processing...</div>

    <footer class="footer py-3 bg-body-tertiary">
        <div class="container text-center">
            <span class="text-body-secondary">ZatcaEGS @VersionHelper.GetVersion() </span>
        </div>
    </footer>

    
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>

    <script>

        $(document).ready(function () {

            $('#complianceCheckBtn').click(function (e) {
                e.preventDefault();
                var $btn = $(this);
                $btn.find('.fa-spinner').removeClass('hidden');

                var formData = $('form').serialize();

                $.ajax({
                    url: '@Url.Action("AjaxComplianceCheck")',
                    method: 'POST',
                    data: formData,
                    success: function (response) {
                        var jsonResponse = JSON.parse(response.serverResult);

                        var formattedJson = JSON.stringify(jsonResponse, null, 4);  // Pretty-print JSON with 4 spaces
                        $('#textareaResponse').val(formattedJson);

                        $btn.hide();

                        var clearanceStatus = jsonResponse.clearanceStatus;
                        var reportingStatus = jsonResponse.reportingStatus;
                        var invoiceSubType = response.invoiceSubType;

                        if (clearanceStatus === "CLEARED" || reportingStatus === "REPORTED") {
                            if (!invoiceSubType.startsWith("01")) {
                                $('#buttonsContainer').append(
                                    `<button id="reportingBtn" type="submit" formaction="@Url.Action("Reporting")" class="btn btn-primary mt-1">
                                        <i class="fas fa-spinner fa-spin hidden"></i>
                                        Invoice Reporting
                                    </button>`
                                );
                            }
                            if (!invoiceSubType.startsWith("02")) {
                                $('#buttonsContainer').append(
                                    `<button id="clearanceBtn" type="submit" formaction="@Url.Action("Clearance")" class="btn btn-primary mt-1">
                                        <i class="fas fa-spinner fa-spin hidden"></i>
                                        Invoice Clearance
                                    </button>`
                                );
                            }
                        }
                    },
                    error: function (xhr, status, error) {
                        $('#textareaResponse').val('Error: ' + xhr.responseText);
                    },
                    complete: function () {
                        $btn.find('.fa-spinner').addClass('hidden');
                    }
                });
            });

            $(document).on('click', '#reportingBtn, #clearanceBtn', function () {
                var $btn = $(this);
                $btn.find('.fa-spinner').removeClass('hidden');
            });

        });

    </script>

    <script type="text/javascript">

        function generateQRCode(text) {
            new QRCode(document.getElementById("qrCodeImage"), {
                text: text,
                width: 180,
                height: 180,
                colorDark: "#000000",
                colorLight: "#ffffff",
                correctLevel: QRCode.CorrectLevel.L
            });
        }

        function downloadFile(content, fileName) {
            const element = document.createElement('a');
            element.setAttribute('href', 'data:text/plain;charset=utf-8,' + encodeURIComponent(content));
            element.setAttribute('download', fileName);

            element.style.display = 'none';
            document.body.appendChild(element);

            element.click();
            document.body.removeChild(element);
        }

        document.addEventListener('DOMContentLoaded', function () {

            var Base64QrCode = "@Model.Base64QrCode".replace(/&#x2B;/g, '+');

            if (!Base64QrCode || Base64QrCode.trim() === "") {
                Base64QrCode = "Uncleared Invoice";
            }

            generateQRCode(Base64QrCode);

            var apiReference = @Html.Raw(apiReference);
            var message = "";

            if (apiReference !== null) {
                var apiUrl = apiReference.ApiUrl;
                var secretKey = apiReference.SecretKey;
                var payload = JSON.parse(apiReference.Payload);

                fetch(apiUrl, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${secretKey}`
                    },
                    body: JSON.stringify(payload)
                }).then(response => {
                    if (response.ok) {
                        console.log('Update Zatca Reference successful!');
                        message += 'Update Zatca Reference: successful\n';

                        var apiInvoice = @Html.Raw(apiInvoice);

                        if (apiInvoice !== null) {
                            var apiUrl = apiInvoice.ApiUrl;
                            var secretKey = apiInvoice.SecretKey;
                            var payload = JSON.parse(apiInvoice.Payload);

                            fetch(apiUrl, {
                                method: 'PUT',
                                headers: {
                                    'Content-Type': 'application/json',
                                    'Authorization': `Bearer ${secretKey}`
                                },
                                body: JSON.stringify(payload)
                            }).then(response => {
                                if (response.ok) {
                                    console.log('Update Invoice Data successful!');
                                    message += 'Update Invoice Data: successful\n\n';
                                } else {
                                    message += 'Update Invoice Error: Network response was not ok.\\nn';
                                }
                                finalizeDownload();
                            })
                                .catch(error => {
                                    console.error(`Update Invoice Error: ${error.message}`);
                                    message += `Update Invoice Error: ${error.message}\\nn`;
                                    finalizeDownload();
                                });
                        } else {
                            finalizeDownload();
                        }
                    } else {
                        message += 'Update Zatca Reference Error: Network response was not ok.\n';
                        finalizeDownload();
                    }
                })
                    .catch(error => {
                        console.error(`Update Zatca Reference Error: ${error.message}`);
                        message += `Update Zatca Reference Error: ${error.message}\n`;
                        finalizeDownload();
                    });

            } else {
                finalizeDownload();
            }

            
            function finalizeDownload() {
                // Check if there is a message to display (if applicable)
                if (message !== "") {
                    alert(message);
                }

                // Use the file name from TempData
                const zipFileName = '@zipFileName';

                // Prepare to download the ZIP file
                const zipFileBytes = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(zipFileBytes));

                if (zipFileBytes) {
                    // Convert the byte array to a base64 string
                    const byteCharacters = atob(zipFileBytes);
                    const byteNumbers = new Uint8Array(byteCharacters.length);
                    for (let i = 0; i < byteCharacters.length; i++) {
                        byteNumbers[i] = byteCharacters.charCodeAt(i);
                    }

                    // Create a Blob from the byte array
                    const blob = new Blob([byteNumbers], { type: 'application/zip' });

                    // Create a link element to trigger the download
                    const link = document.createElement('a');
                    link.href = window.URL.createObjectURL(blob);
                    link.download = zipFileName; // Set the file name for download
                    document.body.appendChild(link); // Append link to the body
                    link.click(); // Programmatically click the link to trigger download
                    document.body.removeChild(link); // Remove link from the body after download
                }
            }

        });

    </script> 

</body>
</html>


