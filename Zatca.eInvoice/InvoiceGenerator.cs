using System.Security.Cryptography.X509Certificates;
using System.Text;
using System.Xml.Serialization;
using Zatca.eInvoice.Helpers;
using Zatca.eInvoice.Models;

namespace Zatca.eInvoice
{
    public class InvoiceGenerator
    {
        public Invoice InvoiceObject { get; set; }
        public string X509CertificateContent { get; set; }
        public string EcSecp256k1Privkeypem { get; set; }

        public InvoiceGenerator(Invoice invoiceObject, string x509CertificateContent, string ecSecp256k1Privkeypem)
        {
            this.InvoiceObject = invoiceObject;
            
            //from SDK
            //this.X509CertificateContent = "MIID3jCCA4SgAwIBAgITEQAAOAPF90Ajs/xcXwABAAA4AzAKBggqhkjOPQQDAjBiMRUwEwYKCZImiZPyLGQBGRYFbG9jYWwxEzARBgoJkiaJk/IsZAEZFgNnb3YxFzAVBgoJkiaJk/IsZAEZFgdleHRnYXp0MRswGQYDVQQDExJQUlpFSU5WT0lDRVNDQTQtQ0EwHhcNMjQwMTExMDkxOTMwWhcNMjkwMTA5MDkxOTMwWjB1MQswCQYDVQQGEwJTQTEmMCQGA1UEChMdTWF4aW11bSBTcGVlZCBUZWNoIFN1cHBseSBMVEQxFjAUBgNVBAsTDVJpeWFkaCBCcmFuY2gxJjAkBgNVBAMTHVRTVC04ODY0MzExNDUtMzk5OTk5OTk5OTAwMDAzMFYwEAYHKoZIzj0CAQYFK4EEAAoDQgAEoWCKa0Sa9FIErTOv0uAkC1VIKXxU9nPpx2vlf4yhMejy8c02XJblDq7tPydo8mq0ahOMmNo8gwni7Xt1KT9UeKOCAgcwggIDMIGtBgNVHREEgaUwgaKkgZ8wgZwxOzA5BgNVBAQMMjEtVFNUfDItVFNUfDMtZWQyMmYxZDgtZTZhMi0xMTE4LTliNTgtZDlhOGYxMWU0NDVmMR8wHQYKCZImiZPyLGQBAQwPMzk5OTk5OTk5OTAwMDAzMQ0wCwYDVQQMDAQxMTAwMREwDwYDVQQaDAhSUlJEMjkyOTEaMBgGA1UEDwwRU3VwcGx5IGFjdGl2aXRpZXMwHQYDVR0OBBYEFEX+YvmmtnYoDf9BGbKo7ocTKYK1MB8GA1UdIwQYMBaAFJvKqqLtmqwskIFzVvpP2PxT+9NnMHsGCCsGAQUFBwEBBG8wbTBrBggrBgEFBQcwAoZfaHR0cDovL2FpYTQuemF0Y2EuZ292LnNhL0NlcnRFbnJvbGwvUFJaRUludm9pY2VTQ0E0LmV4dGdhenQuZ292LmxvY2FsX1BSWkVJTlZPSUNFU0NBNC1DQSgxKS5jcnQwDgYDVR0PAQH/BAQDAgeAMDwGCSsGAQQBgjcVBwQvMC0GJSsGAQQBgjcVCIGGqB2E0PsShu2dJIfO+xnTwFVmh/qlZYXZhD4CAWQCARIwHQYDVR0lBBYwFAYIKwYBBQUHAwMGCCsGAQUFBwMCMCcGCSsGAQQBgjcVCgQaMBgwCgYIKwYBBQUHAwMwCgYIKwYBBQUHAwIwCgYIKoZIzj0EAwIDSAAwRQIhALE/ichmnWXCUKUbca3yci8oqwaLvFdHVjQrveI9uqAbAiA9hC4M8jgMBADPSzmd2uiPJA6gKR3LE03U75eqbC/rXA==";
            //this.EcSecp256k1Privkeypem = "MHQCAQEEIL14JV+5nr/sE8Sppaf2IySovrhVBtt8+yz+g4NRKyz8oAcGBSuBBAAKoUQDQgAEoWCKa0Sa9FIErTOv0uAkC1VIKXxU9nPpx2vlf4yhMejy8c02XJblDq7tPydo8mq0ahOMmNo8gwni7Xt1KT9UeA==";
            
            //Self Generated from SDK
            //this.X509CertificateContent = "MIID3jCCA4SgAwIBAgITEQAAOAPF90Ajs/xcXwABAAA4AzAKBggqhkjOPQQDAjBiMRUwEwYKCZImiZPyLGQBGRYFbG9jYWwxEzARBgoJkiaJk/IsZAEZFgNnb3YxFzAVBgoJkiaJk/IsZAEZFgdleHRnYXp0MRswGQYDVQQDExJQUlpFSU5WT0lDRVNDQTQtQ0EwHhcNMjQwMTExMDkxOTMwWhcNMjkwMTA5MDkxOTMwWjB1MQswCQYDVQQGEwJTQTEmMCQGA1UEChMdTWF4aW11bSBTcGVlZCBUZWNoIFN1cHBseSBMVEQxFjAUBgNVBAsTDVJpeWFkaCBCcmFuY2gxJjAkBgNVBAMTHVRTVC04ODY0MzExNDUtMzk5OTk5OTk5OTAwMDAzMFYwEAYHKoZIzj0CAQYFK4EEAAoDQgAEoWCKa0Sa9FIErTOv0uAkC1VIKXxU9nPpx2vlf4yhMejy8c02XJblDq7tPydo8mq0ahOMmNo8gwni7Xt1KT9UeKOCAgcwggIDMIGtBgNVHREEgaUwgaKkgZ8wgZwxOzA5BgNVBAQMMjEtVFNUfDItVFNUfDMtZWQyMmYxZDgtZTZhMi0xMTE4LTliNTgtZDlhOGYxMWU0NDVmMR8wHQYKCZImiZPyLGQBAQwPMzk5OTk5OTk5OTAwMDAzMQ0wCwYDVQQMDAQxMTAwMREwDwYDVQQaDAhSUlJEMjkyOTEaMBgGA1UEDwwRU3VwcGx5IGFjdGl2aXRpZXMwHQYDVR0OBBYEFEX+YvmmtnYoDf9BGbKo7ocTKYK1MB8GA1UdIwQYMBaAFJvKqqLtmqwskIFzVvpP2PxT+9NnMHsGCCsGAQUFBwEBBG8wbTBrBggrBgEFBQcwAoZfaHR0cDovL2FpYTQuemF0Y2EuZ292LnNhL0NlcnRFbnJvbGwvUFJaRUludm9pY2VTQ0E0LmV4dGdhenQuZ292LmxvY2FsX1BSWkVJTlZPSUNFU0NBNC1DQSgxKS5jcnQwDgYDVR0PAQH/BAQDAgeAMDwGCSsGAQQBgjcVBwQvMC0GJSsGAQQBgjcVCIGGqB2E0PsShu2dJIfO+xnTwFVmh/qlZYXZhD4CAWQCARIwHQYDVR0lBBYwFAYIKwYBBQUHAwMGCCsGAQUFBwMCMCcGCSsGAQQBgjcVCgQaMBgwCgYIKwYBBQUHAwMwCgYIKwYBBQUHAwIwCgYIKoZIzj0EAwIDSAAwRQIhALE/ichmnWXCUKUbca3yci8oqwaLvFdHVjQrveI9uqAbAiA9hC4M8jgMBADPSzmd2uiPJA6gKR3LE03U75eqbC/rXA==";
            //this.EcSecp256k1Privkeypem = "MHQCAQEEIAGIdZ/PRnmDASQbE2QIX2jKpwhZpHNDJse+VUfEYE7loAcGBSuBBAAKoUQDQgAESlpx5/dmtgRaV5KT0iT1GbXTrAI+UyOOsztfXqYdSSNc1MwICUT/1oGz/Qxj51vkXsiSE7fWOaHtaSnPH6t6Rw==";
            
            //Self Generated By Code
            //
            this.X509CertificateContent = x509CertificateContent;
            this.EcSecp256k1Privkeypem = ecSecp256k1Privkeypem;

        }
        private string GetCleanInvoiceXML(bool applayXsl = true)
        {
            try
            {
                XmlSerializerNamespaces namespaces = new();
                namespaces.Add("cac", "urn:oasis:names:specification:ubl:schema:xsd:CommonAggregateComponents-2");
                namespaces.Add("cbc", "urn:oasis:names:specification:ubl:schema:xsd:CommonBasicComponents-2");
                //namespaces.Add("ds", "http://www.w3.org/2000/09/xmldsig#");
                namespaces.Add("ext", "urn:oasis:names:specification:ubl:schema:xsd:CommonExtensionComponents-2");
                //namespaces.Add("sac", "urn:oasis:names:specification:ubl:schema:xsd:SignatureAggregateComponents-2");
                //namespaces.Add("sbc", "urn:oasis:names:specification:ubl:schema:xsd:SignatureBasicComponents-2");
                //namespaces.Add("sig", "urn:oasis:names:specification:ubl:schema:xsd:CommonSignatureComponents-2");
                //namespaces.Add("xades", "http://uri.etsi.org/01903/v1.3.2#");

                var invoiceData = InvoiceObject.ObjectToXml(namespaces);

                //invoiceData = invoiceData.MoveLastAttributeToFirst();
                if (applayXsl) { invoiceData = invoiceData.ApplyXSLT(SharedUtilities.ReadResource("ZatcaDataInvoice.xsl"), true); }
                return invoiceData.ToFormattedXml();
            }
            catch (Exception ex)
            {
                //Console.WriteLine($"Error Get CleanInvoice XML: {ex.Message}");
                return null;
            }
        }
        public void GetSignedInvoiceXML(out string InvoiceHash, out string base64SignedInvoice, out string base64QrCode, out string XmlFileName, out string requestApi)
        {
            try
            {
                byte[] certificateBytes = Encoding.UTF8.GetBytes(X509CertificateContent);
                X509Certificate2 parsedCertificate = new(certificateBytes);

                string SignatureTimestamp = DateTime.Now.ToString("yyyy-MM-dd'T'HH:mm:ss");
                string PublicKeyHashing = Convert.ToBase64String(Encoding.UTF8.GetBytes(SharedUtilities.HashSha256AsString(X509CertificateContent)));
                string IssuerName = parsedCertificate.IssuerName.Name;
                string SerialNumber = SharedUtilities.GetSerialNumberForCertificateObject(parsedCertificate);
                string SignedPropertiesHash = SharedUtilities.GetSignedPropertiesHash(SignatureTimestamp, PublicKeyHashing, IssuerName, SerialNumber);

                string CleanInvoice = GetCleanInvoiceXML(true);

                InvoiceHash = SharedUtilities.GetBase64InvoiceHash(CleanInvoice);

                string SignatureValue = SharedUtilities.GetDigitalSignature(InvoiceHash, EcSecp256k1Privkeypem);

                SignedUBL signedUBL = new(InvoiceHash,
                    SignedPropertiesHash,
                    SignatureValue,
                    X509CertificateContent,
                    SignatureTimestamp,
                    PublicKeyHashing,
                    IssuerName,
                    SerialNumber);

                base64QrCode = QrCodeGenerator.GenerateQRCode(InvoiceObject, signedUBL);


                string stringXMLQrCode = SharedUtilities.ReadResource("ZatcaDataQr.xml").Replace("TLV_QRCODE_STRING", base64QrCode);
                string stringXMLSignature = SharedUtilities.ReadResource("ZatcaDataSignature.xml");
                string stringUBLExtension = signedUBL.ToString();

                int profileIDIndex = CleanInvoice.IndexOf("<cbc:ProfileID>");
                CleanInvoice = CleanInvoice.Insert(profileIDIndex - 6, stringUBLExtension);

                int AccountingSupplierPartyIndex = CleanInvoice.IndexOf("<cac:AccountingSupplierParty>");

                CleanInvoice = CleanInvoice.Insert(AccountingSupplierPartyIndex - 6, stringXMLQrCode);

                AccountingSupplierPartyIndex = CleanInvoice.IndexOf("<cac:AccountingSupplierParty>");

                CleanInvoice = CleanInvoice.Insert(AccountingSupplierPartyIndex - 6, stringXMLSignature);


                byte[] bytes = Encoding.UTF8.GetBytes(CleanInvoice);
                base64SignedInvoice = Convert.ToBase64String(bytes);

                requestApi = "{" +
                    "\"invoiceHash\": \"" + InvoiceHash + "\"," +
                    "\"uuid\": \"" + InvoiceObject.UUID + "\"," +
                    "\"invoice\": \"" + base64SignedInvoice + "\"" +
                    "}";

                string SellerIdentification = InvoiceObject.AccountingSupplierParty.Party.PartyTaxScheme.CompanyID.ToString();
                string IssueDate = InvoiceObject.IssueDate.Replace("-", "");
                string IssueTime = InvoiceObject.IssueTime.Replace(":", "");
                string InvoiceNumber = new string(InvoiceObject.ID.Value.ToString().Select(c => Path.GetInvalidFileNameChars().Contains(c) ? '_' : c).ToArray());

                XmlFileName = $"{SellerIdentification}_{IssueDate}{IssueTime}_{InvoiceNumber}.xml";

            }
            catch (Exception ex)
            {
                //Console.WriteLine($"Error Get SignedInvoice XML: {ex.Message}");
                throw;
            }
        }
        public void GetInvoiceXML(out string InvoiceHash, out string base64SignedInvoice, out string XmlFileName, out string requestApi)
        {
            try
            {
                string CleanInvoice = GetCleanInvoiceXML(true);

                InvoiceHash = SharedUtilities.GetBase64InvoiceHash(CleanInvoice);

                byte[] bytes = Encoding.UTF8.GetBytes(CleanInvoice);
                base64SignedInvoice = Convert.ToBase64String(bytes);

                requestApi = "{" +
                    "\"invoiceHash\": \"" + InvoiceHash + "\"," +
                    "\"uuid\": \"" + InvoiceObject.UUID + "\"," +
                    "\"invoice\": \"" + base64SignedInvoice + "\"" +
                    "}";

                string SellerIdentification = InvoiceObject.AccountingSupplierParty.Party.PartyTaxScheme.CompanyID.ToString();
                string IssueDate = InvoiceObject.IssueDate.Replace("-", "");
                string IssueTime = InvoiceObject.IssueTime.Replace(":", "");
                string InvoiceNumber = new string(InvoiceObject.ID.Value.ToString().Select(c => Path.GetInvalidFileNameChars().Contains(c) ? '_' : c).ToArray());

                XmlFileName = $"{SellerIdentification}_{IssueDate}{IssueTime}_{InvoiceNumber}.xml";

            }
            catch (Exception ex)
            {
                //Console.WriteLine($"Error Get Invoice XML: {ex.Message}");
                throw;
            }
        }
    }

}
